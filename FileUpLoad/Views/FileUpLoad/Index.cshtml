
@{
    ViewBag.Title = "文件上传Demo";
}
<style>
    div.form-item {
        margin-top: 20px;
    }

    form {
        border: 2px solid green;
        margin: 5px;
    }
</style>

<form action="../FileUpLoad/ReciveFile2" method="post" enctype="multipart/form-data">
    <div class="form-item">
        <label for="Param1">自定义参数</label>
        <input type="text" name="Param1" required placeholder="第一个传入参数" value="参数一" />
    </div>
    <div class="form-item">
        <label for="file1">文件1</label>
        <input type="file" name="file1" />
    </div>
    <div class="form-item">
        <label for="file2">文件2</label>
        <input type="file" name="file2" />
    </div>
    <div class="form-item">
        <input type="submit" value="提交" />
    </div>
</form>

<form action="../FileUpLoad/ReciveFile3" method="post" enctype="multipart/form-data">
    <div class="form-item">
        <label for="Param1">自定义参数</label>
        <input type="text" name="Param1" required placeholder="第一个传入参数" value="参数一" />
    </div>
    <div class="form-item">
        <label for="file1">文件1</label>
        <input type="file" name="file1" maxFilesSize= "1024*1024*20" required="required" />
    </div>
    <div class="form-item">
        <label for="file2">文件2</label>
        <input type="file" name="file2" maxFilesSize= "1024*1024*1024"  />
    </div>
    <div class="form-item">
        <input type="button" value="提交" onclick="ajaxCommit(this)" />
    </div>
</form>
<form action="../FileUpLoad/ReciveFile2" method="post" enctype="multipart/form-data">
    <div class="form-item">
        <label for="Param1">自定义参数</label>
        <input type="text" name="Param1" required placeholder="第一个传入参数" value="参数一" />
    </div>
    <div class="form-item">
        <label for="file1">文件1</label>
        <input type="file" name="file1" maxFilesSize="1024*1024*20" required="required" />
    </div>
    @*<div class="form-item">
        <label for="file2">文件2</label>
        <input type="file" name="file2" maxFilesSize="1024*1024*1024" />
    </div>*@
    <div class="form-item">
        <input type="button" value="提交" onclick="ajaxCommit1(this)" />
    </div>
</form>
<form action="../FileUpLoad/ReciveFile4" method="post" enctype="multipart/form-data">
    <div class="form-item">
        <label for="Param1">自定义参数</label>
        <input type="text" name="Param1" required placeholder="第一个传入参数" value="参数一" />
    </div>
    <div class="form-item">
        <label for="file1">文件1</label>
        <input type="file" name="file1" maxFilesSize="1024*1024*1024" required="required" multiple />
    </div>
    <div class="form-item">
            <label for="file2">文件2</label>
            <input type="file" name="file2" maxFilesSize="1024*1024*1024"  multiple />
    </div>
    <div class="form-item">
        <input type="button" value="提交" onclick="ajaxCommit3(this)" />
    </div>
</form>
<div  class="progress-group"  style="border:2px solid blue">
    <div class="progress-total">
        <h4>总进度</h4>
        <div class="progress">
            <div class="progress-bar" role="progressbar" aria-valuenow="60"
                 aria-valuemin="0" aria-valuemax="100" style="width: 40%;">
                <span class="sr-only">40% 完成</span>
            </div>
        </div>
        <button class="pause glyphicon glyphicon-pause"></button>
        <button class="play glyphicon glyphicon-play" ></button>
    </div>
</div>

@section scripts{
    <script src="~/Scripts/jquery.nemo.ajaxform.js"></script>
    <script type="text/javascript">

        //创建一个中文件信息
        function AllFileHandler() {
            this.EventHandlers = {};    //事件容器
            this.Files = [];            //文件列表
            this.FileName = "总进度";
            this.FinishedSize = 0;
            this.TotalSize = 0;
            this.TotalFileCnt = 0;
            this.FinishedFileCnt = 0;
            this.SendStatus = 0;
        }
        AllFileHandler.prototype = {
            on: function (eventType, handler) {
                var self = this;
                if (!(eventType in self.EventHandlers)) {
                    self.EventHandlers[eventType] = [];
                }
                self.EventHandlers[eventType].push(handler);
                return self;
            },
            //触发时间【发布事件】
            emit: function (eventType) {
                var self = this;
                var handlerArgs = Array.prototype.slice.call(arguments, 1);
                for (var i = 0; i < self.EventHandlers[eventType].length; i++) {
                    self.EventHandlers[eventType][i].apply(self, handlerArgs);
                }
                return self;
            },
            //取消订阅事件
            off: function (eventType, handler) {
                var currentEvent = this.EventHandlers[eventType];
                var len = 0;
                if (currentEvent) {
                    len = currentEvent.length;
                    for (var i = len - 1; i >= 0; i--) {
                        if (currentEvent[i] === handler) {
                            currentEvent.splice(i, 1);
                        }
                    }
                }
                return this;
            },
            //暂停发送数据
            Pause: function () {
                var self = this;
                for (let i = 0; i < self.Files.length; i++) {
                    self.Files[i].Pause();
                }
                return self;
            },
            //继续发送数据
            Continue: function () {
                var self = this;
                for (let i = 0; i < self.Files.length; i++) {
                    self.Files[i].Continue();
                }
                return self;
            }
        }



        function FileHandler(opt) {
            this.EventHandlers = {};//事件容器
            this.InputFileName = opt.inputFileName;                                         // input file name 属性
            this.file = opt.file;                                                           //上传文件
            this.FileName = this.file.name;                                                  // 文件名称
            this.FileSaveName = null;                                                        // 文件保存名称【后台传回】
            this.WebUrl = null;                                                               //文件Web访问地址
            this.TotalSize = this.file.size;                                                 //文件大小
            this.UpLoadId = null;                                                           //上传数据块唯一标示
            this.FinishedSize = 0;                                                          //已经上传文件大小
            //上传状态
            this.PauseStatus = false;                                                       //暂停状态
            this.SendStatus = 0;                                                            // 0表示上传中；-1 表示中断；1上传完成

            this.ErrMsg = null;                                                             // 异常信息
            this.BlockIndex = 1;                                                            //上传块索引
            this.BlockTotal = Math.ceil(this.TotalSize / this.BlockSize);                   //数据块总数

            this.FormFileInfo = {}                                                           //构建上传文件信息
            this.FormFileInfo.UpLoadId = '';
            this.FormFileInfo.BlockTotal = this.BlockTotal;
            this.FormFileInfo.BlockIndex = this.BlockIndex;
            this.FormFileInfo.FileName = this.FileName;
            this.FormFileData = new FormData();                                                  //创建表单
            this.FormFileData.append("FileInfo", JSON.stringify(this.FormFileInfo));
            this.FormFileData.append("HandleStatus", "FILESAVE");                                    //告诉后台文件保存
            this.FormFileData.append(this.InputFileName, null);
            

        }
        FileHandler.prototype = {
            BlockSize: 1024 * 1024 * 3, //设置每次上传块的大小
            //订阅时间[当前支持 类型：sendChange=>文件传送改变时间]
            on: function (eventType, handler) {
                var self = this;
                if (!(eventType in self.EventHandlers)) {
                    self.EventHandlers[eventType] = [];
                }
                self.EventHandlers[eventType].push(handler);
                return self;
            },
            //触发时间【发布事件】
            emit: function (eventType) {
                var self = this;
                var handlerArgs = Array.prototype.slice.call(arguments, 1);
                for (var i = 0; i < self.EventHandlers[eventType].length; i++) {
                    self.EventHandlers[eventType][i].apply(self, handlerArgs);
                }
                return self;
            },
            //取消订阅事件
            off: function (eventType, handler) {
                var currentEvent = this.EventHandlers[eventType];
                var len = 0;
                if (currentEvent) {
                    len = currentEvent.length;
                    for (var i = len - 1; i >= 0; i--) {
                        if (currentEvent[i] === handler) {
                            currentEvent.splice(i, 1);
                        }
                    }
                }
                return this;
            },

            //暂停发送数据
            Pause: function () {
                var self = this;
                self.PauseStatus = true;
                return self;
            },
            //继续发送数据
            Continue: function () {
                var self = this;
                if (self.PauseStatus) {
                    self.PauseStatus = false;
                    self.Send();
                }
                return self;
            },
            //发送数据
            Send : function () {
                var self = this;
                if (self.PauseStatus) {
                    //暂停
                    return false;
                }
                self.SendStatus = 0;  //表示传送中
                var start = (self.BlockIndex - 1) * self.BlockSize;
                var end = Math.min(self.TotalSize, start + self.BlockSize);
                self.FormFileData.set(self.InputFileName, self.file.slice(start, end));
                self.FormFileInfo.UpLoadId = self.UpLoadId;
                self.FormFileInfo.BlockIndex = self.BlockIndex;
                self.FormFileData.set("FileInfo", JSON.stringify(self.FormFileInfo));
                $.ajax({
                    url: "../FileUpLoad/ReciveFile4",
                    method: 'POST',
                    data: self.FormFileData,
                    contentType: false,
                    processData: false,
                    dataType: 'json',
                    success: function (reData) {
                        //保存反馈回来信息
                        self.ErrMsg = reData.FileSaveErrMsg;
                        self.FileSaveName = reData.FileSaveName;
                        self.WebUrl = reData.WebUrl;
                        if (reData.BlockSaveStatus) {
                            self.BlockIndex++;
                            if (self.BlockIndex == 2) {
                                self.UpLoadId = reData.UpLoadId;
                            }
                            if (self.BlockIndex <= self.BlockTotal) {
                                self.Send();
                            }
                            else {
                                if (reData.FileSaveStatus) {
                                    self.SendStatus = 1;
                                    //文件保存成功后操作
                                } else {
                                    self.SendStatus = -1;
                                    self.ErrMsg = reData.FileSaveErrMsg;
                                }

                            }
                        } else {
                            //后台传来异常
                            self.SendStatus = -1;
                            self.ErrMsg = reData.FileSaveErrMsg;
                        }
                    },
                    error: function (e) {
                        self.SendStatus = -1;
                        self.ErrMsg = e;
                    },
                    complete: function () {
                        self.FinishedSize =
                            (self.BlockIndex - 1) * self.BlockSize > self.TotalSize ? self.TotalSize : (self.BlockIndex - 1) * self.BlockSize;
                        //触发事件
                        self.emit("sendChange", self);
                    }
                });
            }

        }



        //进度条类//可以定制
        function ProgressHandler(fileHandler) {
            var progress = $("div.progress-total").clone();
            progress.removeClass("progress-total");
            progress.find("h4").text(fileHandler.FileName);
            $("div.progress-group").append(progress);
            progress.find("button.pause").click(function () {
                fileHandler.Pause();
            });
            progress.find("button.play").click(function () {
                fileHandler.Continue();
            });
            //订阅事件
            fileHandler.on('sendChange', function (data) {
                switch (fileHandler.SendStatus) {
                    case 0:
                        break;
                    case 1:   //文件上传完成
                        break;
                    case -1:  //发生异常
                        break;
                }
                progress.find(".progress-bar")
                    .css("width", Math.ceil((fileHandler.FinishedSize / fileHandler.TotalSize) * 100) + "%");
            });
        }

        //function ajaxUploadFile(opt, funProgress) {
        //    var blockSize = 1024 * 1024 * 3;                    //块大小
        //    var dataBlock = opt.fileInputName;                  //input file name 属性
        //    var file = opt.file;                                //上传文件
        //    var fileName = file.name;                           // 文件名称          
        //    var totalSize = file.size;                          //文件大小
        //    var blockTotal = Math.ceil(totalSize / blockSize);  //数据块总数
        //    var upLoadId = null;                                //上传数据块唯一标示
        //    var blockIndex = 1;                                 //上传块索引
        //    //进度信息
        //    var progressInfo = { };
        //    progressInfo.Key = dataBlock;
        //    progressInfo.FileName = fileName;
        //    progressInfo.TotalSize = totalSize;
        //    progressInfo.FinisheSize = 0;
        //    progressInfo.Finished = false;
        //    progressInfo.UpLoadId = null;
        //    progressInfo.Status = true;  //上传状态
        //    progressInfo.ErrTimes = 0;   //上传错误次数
        //    progressInfo.BlockSize = blockSize;

        //    var FormFileInfo = {} //构建上传文件信息

        //    FormFileInfo.UpLoadId = '';
        //    FormFileInfo.BlockTotal = blockTotal;
        //    FormFileInfo.BlockIndex = blockIndex;
        //    FormFileInfo.FileName = fileName;
        //    var formData = new FormData();
        //    formData.append("FileInfo", JSON.stringify(FormFileInfo));
        //    formData.append("HandleStatus", "FILESAVE");
        //    formData.append(dataBlock, null);
        //    (function upLoad() {
        //        var start = (blockIndex - 1) * blockSize;
        //        var end = Math.min(totalSize, start + blockSize);
        //        formData.set(dataBlock, file.slice(start, end));
        //        FormFileInfo.UpLoadId = upLoadId;
        //        FormFileInfo.BlockIndex = blockIndex;
        //        formData.set("FileInfo", JSON.stringify(FormFileInfo));
        //        $.ajax({
        //            url: "../FileUpLoad/ReciveFile4",
        //            method: 'POST',
        //            data: formData,
        //            contentType: false,
        //            processData: false,
        //            dataType: 'json',
        //            success: function (reData) {
        //                console.log(reData.BlockIndex);
        //                if (reData.BlockSaveStatus) {
        //                    progressInfo.Status = true;
        //                    progressInfo.FinisheSize += blockSize;
        //                    progressInfo.BlockSize = progressInfo.FinisheSize > totalSize ? (blockSize - (progressInfo.FinisheSize - totalSize)) : blockSize;
        //                    progressInfo.FinisheSize = progressInfo.FinisheSize > totalSize ? totalSize : progressInfo.FinisheSize;                            
        //                    blockIndex++;
        //                    if (blockIndex == 2) {
        //                        upLoadId = reData.UpLoadId;
        //                        progressInfo.UpLoadId = upLoadId;
        //                    }
        //                    if (blockIndex <= blockTotal) {
        //                        funProgress(progressInfo);
        //                        upLoad();
        //                    }
        //                    else {
        //                        console.log("上传成功！");
        //                        progressInfo.Finished = true;
        //                        funProgress(progressInfo);
        //                    }
        //                } else if (progressInfo.ErrTimes <= 10) {
        //                    //错误上传次数小于10次继续上传
        //                    progressInfo.ErrTimes += 1;
        //                    progressInfo.Status = false;
        //                    funProgress(progressInfo);
        //                    upLoad();
        //                } else {
        //                    //终止上传
        //                    progressInfo.ErrTimes += 1;
        //                    progressInfo.Status = false;
        //                    funProgress(progressInfo);
        //                }
                        
        //            },
        //            error: function (e) {
        //                console.log(e);
        //            }
        //        })
        //    })();
        //}

        function ajaxCommit3(opt) {
            var $form = $(opt).parents("form");
            var $fileInput = $form.find("input[type=file]");

            //记录表单中所有文件上传信息
            var allFileInfo = new AllFileHandler();
            allFileInfo.FileName = "总进度";
            allFileInfo.FinishedSize = 0;
            allFileInfo.TotalSize = 0;
            allFileInfo.TotalFileCnt = 0;
            allFileInfo.FinishedFileCnt = 0;
            //循环input表单中所有的File文件
            $fileInput.each(function () {
                $(this.files).each(function () {
                    allFileInfo.TotalFileCnt += 1;
                    allFileInfo.TotalSize += this.size;
                });
            });
            //创建总进度条
            new ProgressHandler(allFileInfo);

            //对表单中包含文件依次上传
            $fileInput.each(function () {
                var inputFileName = this.name;
                $(this.files).each(function () {
                    var fileHandler = new FileHandler({ file: this, inputFileName: inputFileName });
                    new ProgressHandler(fileHandler);                                                //创建一个该文件的控制

                    //订阅sendChange事件，获取每个文件上传信息
                    fileHandler.on('sendChange', function () {
                        switch (this.SendStatus) {
                            case 0:
                                //传送中
                                allFileInfo.FinishedSize += this.BlockSize;
                                break;
                            case 1:
                                //完成传送
                                allFileInfo.FinishedSize += this.TotalSize % this.BlockSize;
                                allFileInfo.FinishedFileCnt += 1;
                                if (allFileInfo.FinishedFileCnt == allFileInfo.TotalFileCnt) {
                                    allFileInfo.SendStatus = this.SendStatus;
                                    sendFormInfo();
                                    alert("上传完成！");
                                }
                                break;
                            case -1:
                                allFileInfo.SendStatus = this.SendStatus;
                                break;
                        }
                        //触发总文件上传进度改变事件
                        allFileInfo.emit("sendChange", allFileInfo);
                    });
                    allFileInfo.Files.push(fileHandler);
                    fileHandler.Send.apply(fileHandler); //一定要带上作用域
                });
            });

            //当表单中的文件上传成功后调用
            var sendFormInfo = function () {
                var newForm = new FormData($form[0]);

                $fileInput.each(function () {
                    alert(this.name);
                    newForm.delete(this.name);//删除file空间部分
                });

                newForm.append("HandleStatus", "FORMSAVE");
                var filesInput = [];
                $(allFileInfo.Files).each(function () {
                    console.log(this);
                    var obj = {};
                    obj.Key = this.InputFileName;
                    obj.UpLoadId = this.UpLoadId;
                    obj.FileSaveName = this.FileSaveName;
                    obj.WebUrl = this.WebUrl;
                    filesInput.push(obj);
                });
                console.log(filesInput);
                newForm.append("FileListInfoJson", JSON.stringify(filesInput));
                $.ajax({
                    url: "../FileUpLoad/ReciveFile4",
                    method: 'POST',
                    data: newForm,
                    contentType: false,
                    processData: false,
                    dataType: 'json',
                    success: function (reData) {
                        console.log(reData);
                    },
                    error: function (e) {
                    },
                    complete: function () {
                    }
                });
            }

        }



        //function ajaxCommit2(opt) {
        //    var $form = $(opt).parents("form");
        //    var $fileInput = $form.find("input[type=file]");
        //    $fileInput.each(function () {
        //        var file = this.files[0];
        //        var blockSize = 1024 * 1024 * 3;//块大小
        //        var totalSize = file.size;
        //        var blockCnt = Math.ceil(totalSize / blockSize);
        //        var upLoadId = null;
        //        var index = 0;
        //        var formData = new FormData();
        //        formData.append('FileSaveName', file.name);
        //        formData.append('BlockTotal', blockCnt);
        //        formData.append('BlockIndex', index);
        //        formData.append('UpLoadId', null);
        //        formData.append('DataBlock', null);
        //        (function upload() {
        //            index++;
        //            var start = (index - 1) * blockSize;
        //            var end = Math.min(totalSize, start + blockSize);
        //            formData.set('DataBlock', file.slice(start, end));
        //            formData.set('BlockIndex', index);
        //            formData.set('UpLoadId', upLoadId);
        //            $.ajax({
        //                url: "../FileUpLoad/ReciveFile4",
        //                method: 'post',
        //                data: formData,
        //                contentType: false,
        //                processData: false,
        //                dataType: 'json',
        //                success: function (reData) {
        //                    console.log(reData);
        //                    if (index == 1)
        //                        upLoadId = reData.UpLoadId;
        //                    if (index < blockCnt) {
        //                        upload();
        //                    }
        //                    else {
        //                        console.log("上传成功！");
        //                    }
        //                },
        //                error: function (e) {
        //                    console.log(e);
        //                }
        //            })
        //        })()

        //    })


        //}





        //function ajaxCommit1(opt) {
        //    var $form = $(opt).parents("form");
        //    var $fileInput = $form.find("input[type=file]");
        //    $fileInput.each(function () {
        //        var file = this.files[0];
        //        var blockSize = 1024 * 1024 * 2;//块大小
        //        var totalSize = file.size;
        //        var blockCnt = Math.ceil(totalSize / blockSize);
        //        var upLoadId = null;
        //        var index = 0;
        //        var formData = new FormData();
        //        formData.append('FileName', file.name);
        //        formData.append('TotalBlock', blockCnt);
        //        formData.append('Index', index);
        //        formData.append('UpLoadId', null);
        //        formData.append('DataBlock', null);
        //        alert(blockCnt);
        //        (function upload() {
        //            index++;
        //            var start = (index - 1) * blockSize;
        //            var end = Math.min(totalSize, start + blockSize);
        //            formData.set('DataBlock', file.slice(start, end));
        //            formData.set('Index', index);
        //            formData.set('UpLoadId', upLoadId);
        //            $.ajax({
        //                url: "../FileUpLoad/ReciveFile3",
        //                method: 'post',
        //                data: formData,
        //                contentType: false,
        //                processData: false,
        //                dataType:'json',
        //                success: function (reData) {
        //                    console.log(reData);
        //                    if (index == 1)
        //                        upLoadId = reData.UpLoadId;
        //                    if (index < blockCnt) {
        //                        upload();
        //                    }
        //                    else {
        //                        console.log("上传成功！");
        //                    }
        //                },
        //                error: function (e) {
        //                    console.log(e);
        //                }
        //            })
        //        })()
                
        //    })


        //}


        //function ajaxCommit(opt) {
        //    $form = $(opt).parents("form");
        //    var $files = $form.find("input[type=file]");
        //    alert($files.length);
        //    //$files.each(function () {
        //    //    var $this = $(this);
        //    //    alert($this.attr("required"));
        //    //    if (this.files.length == 0) {
        //    //        alert("请选择要上传的文件");
        //    //        return false;
        //    //    };
        //    //    var file = this.files[0];
        //    //    //上传文件扩展名限制【当用户换一个扩展名还是可以上传Bug】
        //    //    var accept = $(this).attr("accept");
        //    //    accept = accept == undefined ? "*" : accept.toLowerCase(); //"*" 表示类型无限制
        //    //    var fileName = file.name;
        //    //    var fileExtension = $.trim(fileName.substring(fileName.lastIndexOf(".")).toLowerCase());
        //    //    if (accept != "*" && accept.indexOf(fileExtension) == -1) {
        //    //        alert("上传文件 【" + file.name + "】 类型不符合要求【" + accept + "】");
        //    //        return false;
        //    //    }
        //    //    //上传问价大小限制
        //    //    var maxFileSize = $this.attr("maxFilesSize");  //用户配置大小
        //    //    maxFileSize = maxFileSize == undefined ? 0 : eval(maxFileSize); //0表示文件大小无限制
        //    //    if (maxFileSize != 0 && file.size > maxFileSize) {
        //    //        alert("上传文件 【" + file.name + "】 大小超出限制【 " + (maxFileSize / 1024 / 1024) + "M】 ");
        //    //        return false;
        //    //    }
        //    //});

        //    //return false;
        //    //var formData = new FormData($this.parents("form")[0]);
        //    $.fn.nemoAjaxForm({
        //        url: "../FileUpLoad/ReciveFile2",
        //        method: "POST",
        //        form: $form,
        //        contentType: false,
        //        processData: false,//避免对formData序列化处理
        //        dataType: "text",
        //        success: function (reData) {
        //            alert(reData);
        //        },
        //        error: function (reData) {
        //            console.log(reData);
        //        }
        //    })

        //}


    </script>
    }